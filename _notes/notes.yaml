1. User session
2. athletes_profile_html.php:
    -Schedule
        display image from coordinator -> Schedule 
3. atheletes_profile_html.php

[  ] Help.html
:Cancel: - dito po yung sa search nagana na naman po sya kuya ang problema lang po is  once na nagtype ako then lalabas yung mga suggested words , i need ko po is dapat kapag click ko po yung at sinearch dapat may pop message that  contain information or instruction regard on that process
:TODO: Make it FAQ
[  ] Athletes-login.html
- contact button dapat po kapag clinick is information nalang po jg contacts not chat bot
-forgot button dapat nakakapag allow na magreset at nareceive dapat thru email
[  ] Athletes profile
- approved logo that tells or represent that their account was approved that is base on the database status
- allowance button - allows the athletes to tract their allowance , like kapag clinick po may message lang containing information that tells whether their allowance was process or not yet applicable if not varsity
-dapat may expand button sa announcements that allows user to view it more visible
:DONE: - apply evaluation button , dito dapat mag didirect sa evaluation form
:DONE: Apply evaluation for restricted to coordinator list. athlete will have a application form for evaluation(restrict 1 application only)

:DONE: - forms dapat po yung mga file name siguro is clickable nalang instead of adding an download button and all this forms was came from the coordinator
:DONE: Create upload module for coordinator. can upload multiple file. Display file to athletes home page.(downloadable)
File clickable for download

- schedule dapat dynamic yung image and allow user to download yung print button ( note okay na yung print button)
-Credentials dito nakalagay yung mga list of credentials na meron sila and meron dapat upload button that let them upload file if may need silang isubmitted na dapat mag rereflect or manonotify si coor na nakapagsubmit na si specific player
[  ] Admin page
- same thing that need to fix with the athletes - logins.html
[  ] Admin profile
- dapat yung username was reflect from the data given base on the email na ginamit
- administrator word below was constant
- update button will use if the user wanted to update the allowance of athletes
, filter button for campus and school is will use po to filter the names of coordinator per school and campuses na dapat magrereflect po sa list of coordinator kapag nag do na ng filterings
- view button naman po is once na clinick dapat mag aallow kay admin na view yung basic information ni coordinator, and also must be the name was reflect on what name indicated on the field where the admin click the view button kahit pop up message nalang din po are kuya may Ã— button lang
- add button this will be allow the admin to add coordinator and when the user click it , she/ he must went to add coordinator page
- filter for school, campus,  event  - use to easily navigate the names or specific information need based on filtering ( note kuya ito po ay ano lang to filter lang para kapag nag search sya using search field automatically ang lalabas lang na list ng athletes ay yung finilter nya)
- list field di po dapat lalabas yung mga list of names the looking for per campus , or school or even events .
- print allow the admin to print the names needed or resulted
- chart it was same po sa coordinator chat dapat nakakapag allow din na mabago bago yung type of chart ang dapat ang makikita ditong mga rate was same with the coordinator chart dapat yung print button dito ang mapiprint lang was the chart 
- dapat mag expand button din po sa chart
[  ] Add Coordinator page
- all field required to fill out and dapat kapag nag submit papasok sa database ng users
[  ] Coordinator profile
- same with admin dapat yung nagrereflect sa kung ano yung data base sa email na ginamit and coordinator word was constant
- filtering for school and campus ( note yung campus po papaltan ng sports nalang
- list of approval dito dapat lalabas yung mga list of athletes base sa filtering and each field dapat may view button na magdidirect sa approval form interface
:TODO: create button to redirect to athlete's Profile.
- athletes button was use to view athletes names *|( note dito po papasok yung profiling the players na kung saan kapag napresent na yung list kapag clinick ay papasok na  or pupunta na sa profiling the player page)|* and schedules button is in where they can upload updated schedules that must reflect sa mga respective page ng athletes  same with  events  button , and yung uploads button was use to upload generic forms na magrereflect sa forms ni athletes.
- search field was use to search athletes name 
- list field is in where they can see the list of athletes or forms na pwede nila ishare sa athletes
- chart same thing with the chart of admin and print to print that chart only and dapat mag expand button din
[  ] Approval form
:DONE: - ito dapat yung makikita kapag clinick ko yung view sa lis t of approval field. Na nakay coordinator page na dapat ang lalabas ditong information is kung ano yung yung pinasa ni user upon registration  and yung parang file button po dito is kapag click ko po ito dapat mag didisplay yung mga file na pinasa ni athletes and the accept button was kapag clinick ni coordinator dapat magrereflect na sa data status ni athletes na approved and kapag declined was magrereflect din at kapag inaccept or hindi dapat may matatanggap si user na email whether approved or decline yung registration nila
[] profiling the players
 - ito kuya ay papasok dito sa part ni coordinator  yung athletes po nadiscuss ko po ito dito sa coordinator page and also dapat lahat ng info dito ay base sa lahat ng information na base sa records ni athletes as wells us kung saan sya naglaro na pwede po sigurong yung mga records na yun is base na sa details na binibigay ng mga nakaassign sa mga games or kada tournament

--------------
* Changes [dev]
1. Rework file structure
2. Revise Login.
  - Build one login UI.
  - Adjust AuthenticateController
  - Rebuild database for user_role
  - Create users table (for auth)
  - Create user_info (user's information)
  ------
  CREATE TABLE IF NOT EXISTS `users` (
    `id` int NOT NULL AUTO_INCREMENT,
    `active` int NOT NULL DEFAULT '1' COMMENT '1:true, 0:false',
    `role` int NOT NULL,
    `email` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,
    `password` varchar(255) COLLATE utf8mb4_general_ci NOT NULL,
    `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

  ALTER TABLE user_info
  ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
-----

=================
### Summary of the Web App Process

1. **Game Schedule Management**
   - **List View**: Display a list of game schedules with columns for Game Title, Schedule, Sport, School, and Status.
   - **Status Indicators**: Show the status (Active, Inactive, Completed) with color-coded labels.
   - **View Button**: Redirects to the Athlete List page for the selected game.

   ```
   +-------------------------------------------------------------+
   | Game Title       | Schedule       | Sport     | School      | Status   | Actions |
   +-------------------------------------------------------------+
   | Basketball Final | 2024-09-25     | Basketball| XYZ School  | Active   | [View]  |
   | Soccer Semi-Final| 2024-09-26     | Soccer    | ABC School  | Inactive | [View]  |
   | Volleyball Match | 2024-09-27     | Volleyball| DEF School  | Completed| [View]  |
   +-------------------------------------------------------------+
   ```

2. **Athlete List Management**
   - **Merged List**: Combine Target Athlete List and Applied Athlete List.
   - **Status Indicators**: Show status as Pending (if documents are not submitted) or Applied (if documents are submitted).
   - **Add Button**: Opens a modal or new page to select and add athletes from the remaining list.
   - **Remove Button**: Allows users to remove athletes from the list.
   - **Accept/Deny Buttons**: Approve or reject athletes directly from the list.
   - **View Button**: Redirects to the Athlete Information page.

   ```
   +--------------------------------------------------+
   | Athlete Name | Sport     | School      | Status  | Actions  |
   +--------------------------------------------------+
   | John Doe     | Basketball| XYZ School  | Pending | [Accept] [Deny] [View] |
   | Jane Smith   | Basketball| XYZ School  | Applied | [Accept] [Deny] [View] |
   +--------------------------------------------------+
   [Add Athlete]
   ```

3. **Athlete Information Page**
   - **Detailed View**: Show comprehensive information about the athlete, including personal details, performance metrics, and previous evaluations.
   - **Download Document**: Provide a button to download relevant documents.
   - **Accept/Deny Buttons**: Approve or reject the athlete from this page as well.

   ```
   +---------------------------------------------+
   | Athlete Name: John Doe                      |
   | Sport: Basketball                           |
   | School: XYZ School                          |
   | Performance Metrics: ...                    |
   | Previous Evaluations: ...                   |
   +---------------------------------------------+
   [Download Document] [Accept] [Deny]
   ```

4. **User Notifications**
   - **Email Notifications**: Notify athletes about their application status.
   - **In-App Alerts**: Inform users of important updates and actions.

5. **Search and Filters**
   - **Search Bar**: Allow users to search for specific game schedules, athletes, etc.
   - **Filters**: Enable filtering by various criteria such as date, sport, school, and status.

6. **Analytics and Reporting**
   - **Performance Analytics**: Provide insights into athlete performance and evaluation trends.
   - **Custom Reports**: Allow users to generate reports based on specific criteria.

7. **Mobile Compatibility**
   - **Responsive Design**: Ensure the web app is accessible and functional on mobile devices.

By following this process, you can create a comprehensive and user-friendly web app for managing athlete evaluations. If you need further assistance with specific features or coding, feel free to ask! ðŸ˜Š

### DB SCHEMA

CREATE TABLE game_schedules (
    id INT AUTO_INCREMENT PRIMARY KEY,
    game_title VARCHAR(255) NOT NULL,
    schedule DATETIME NOT NULL,
    sport VARCHAR(255) NOT NULL,
    status ENUM('Active', 'Inactive', 'Completed') NOT NULL,
    created_user INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (created_user) REFERENCES users(id)
);

CREATE TABLE evaluations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    game_schedules_id INT NOT NULL,
    athlete_id INT NOT NULL,
    evaluator_id INT NOT NULL,
    evaluation_date DATETIME NOT NULL,
    comments TEXT,
    status ENUM('Pending', 'Accepted', 'Denied') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (game_schedules_id) REFERENCES game_schedules(id),
    FOREIGN KEY (athlete_id) REFERENCES users(id),
    FOREIGN KEY (evaluator_id) REFERENCES users(id),
    INDEX (game_schedules_id),
    INDEX (athlete_id),
    INDEX (evaluator_id),
    INDEX (evaluation_date)
);
